CREATE DATABASE INVENTORY;

USE INVENTORY;
--Inventory Database created

--Creating Product table
CREATE TABLE PRODUCT
(PID CHAR(5), 
PDESC VARCHAR(15) NOT NULL,
PRICE DECIMAL(5,2) CHECK(PRICE>0),
CATEGORY VARCHAR(15) CHECK(CATEGORY IN ('IT','HA','HC')),
SID CHAR(5) REFERENCES SUPPLIER(SID),
PRIMARY KEY(PID)
);


--Creating Supplier table
CREATE TABLE SUPPLIER
(SID CHAR(5), 
SNAME VARCHAR(30) NOT NULL,
SADD VARCHAR(30) NOT NULL,
SCITY VARCHAR(15) DEFAULT('DELHI'),
SPHONE CHAR(10) UNIQUE,
EMAIL VARCHAR(30),
PRIMARY KEY(SID)
);

--Creating Customer table
CREATE TABLE CUST
(CID CHAR(5), 
CNAME VARCHAR(15) NOT NULL,
ADDRESS VARCHAR(30) NOT NULL,
CITY VARCHAR(15) NOT NULL,
PHONE CHAR(10) NOT NULL,
EMAIL VARCHAR(30) NOT NULL,
DOB DATE CHECK(DOB<'1-JAN-2000'),
PRIMARY KEY(CID)
);

--Creating Orders table
CREATE TABLE ORDERS
(OID CHAR(5), 
ODATE DATE,
CID CHAR(5) REFERENCES CUST(CID),
PID CHAR(5) REFERENCES PRODUCT(PID),
OQTY NUMERIC CHECK(OQTY>=1),
PRIMARY KEY(OID)
);

--Creating Stock table
CREATE TABLE STOCK(
PID CHAR(5) REFERENCES PRODUCT(PID),
SQTY NUMERIC(5) CHECK(SQTY>=0),
ROL NUMERIC(5) CHECK(ROL>0),  --ROL(Reorder Level) is the minimum quantity which is to be maintained in the stock 
MOQ NUMERIC(5) CHECK(MOQ>=5)  --MOQ(Minimum Order Quantity) is the minimum quantity that is to be bought, whenever the order will be placed  
);


--Function to generate a Alphanumeric ID
CREATE FUNCTION GENID(@C CHAR(1),@I INT)
RETURNS CHAR(5)
AS
BEGIN
	DECLARE @R CHAR(5);
	DECLARE @ID CHAR(5);
SELECT @R=CASE
		WHEN @I<10 THEN CONCAT(@C,'000')
		WHEN @I<100 THEN CONCAT(@C,'00')
		WHEN @I<1000 THEN CONCAT(@C,'0')
		WHEN @I<10000 THEN @C
		ELSE 'NULL'
	END;
SET @ID=RTRIM(@R)+LTRIM(CONVERT(CHAR(4),@I));
	RETURN @ID;
END;

CREATE SEQUENCE SUPPIER_SEQ 
AS INT
START WITH 1
INCREMENT BY 1;

--DROP SEQUENCE SUPPIER_SEQ;

CREATE PROCEDURE ADDSUPPLIER @A AS VARCHAR(15), @B AS VARCHAR(30), @C AS VARCHAR(15), @D AS CHAR(10), @E AS VARCHAR(30)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;

	SET @I=NEXT VALUE FOR SUPPIER_SEQ;
	SET @ID=DBO.GENID('S',@I);

	INSERT INTO SUPPLIER
	VALUES(@ID, @A, @B, @C, @D, @E);

	SELECT * FROM SUPPLIER;
END;


ADDSUPPLIER "Satyam Computer", "Shop no. 25, Nehru Place", "Delhi",  "9613066594", "SatyamComputers@gmail.com";

ADDSUPPLIER "Neelam Computer", "Shop no. 20, Pallika Bazar", "Delhi",  "9927636594", "NeelamComputers@yahoo.co.in";

ADDSUPPLIER "Swaroop Hardware", "Shop no. 120, Sarojini Nagar", "Delhi",  "9987659874", "SwaroopHardware@yahoo.co.in";


-- UPDATE SUPPLIER
-- SET SNAME='Swaroop Hardware' WHERE SNAME LIKE 'Swaroop%';



CREATE SEQUENCE CUST_SEQ 
AS INT
START WITH 4
INCREMENT BY 1;

--DROP SEQUENCE CUST_SEQ;

CREATE PROCEDURE ADDCUST @A AS VARCHAR(15), @B AS VARCHAR(30), @C AS VARCHAR(15), @D AS CHAR(10), @E AS VARCHAR(30), @F AS DATE
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;

	SET @I=NEXT VALUE FOR CUST_SEQ;
	SET @ID=DBO.GENID('C',@I);

	INSERT INTO CUST
	VALUES(@ID, @A, @B, @C, @D, @E, @F);

	SELECT * FROM CUST;
END;

ADDCUST "Anjani Kumar", "C25, Navi-Mumbai", "Mumbai",  "9267346595", "Anjani@gmail.com", "10-JAN-1988";

ADDCUST "Rohit Khanna", "D20, Marthahelli", "Bangalore",  "9980000365", "Rohit@rediffmail.com", "20-OCT-1998";

ADDCUST "Rajesh", "A5, Bilaspur", "Punjab",  "9872907365", "Rajesh@gmail.com", "2-FEB-1999";

ADDCUST "Shravan", "A31, Dabawali Road", "Sirsa",  "9981111365", "Shravan@yahoo.co.in", "2-JAN-1996";


CREATE SEQUENCE PRODUCT_SEQ 
AS INT
START WITH 5
INCREMENT BY 1;

CREATE PROCEDURE ADDPRO @A AS VARCHAR(15), @B AS DECIMAL(5,2), @C AS VARCHAR(15), @D AS CHAR(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;

	SET @I=NEXT VALUE FOR PRODUCT_SEQ;
	SET @ID=DBO.GENID('P',@I);

	INSERT INTO PRODUCT
	VALUES(@ID, @A, @B, @C, @D);

	SELECT * FROM PRODUCT;
END;

ADDPRO "Nortan AV", 950, "IT", "S0003";

ADDPRO "Keyboard",  820, "HC", "S0002";

ADDPRO "Speakers", 900, "HC", "S0001";

ADDPRO "Mouse",  520, "HA", "S0002";

ADDPRO "Writing Pad",  750, "HA", "S0001";


CREATE SEQUENCE ORDERS_SEQ 
AS INT
START WITH 10
INCREMENT BY 1;

CREATE PROCEDURE ADDORDER @A AS DATE, @B AS CHAR(5), @C AS CHAR(5), @D AS NUMERIC(5)
AS
BEGIN
	DECLARE @ID AS CHAR(5);
	DECLARE @I AS INT;

	SET @I=NEXT VALUE FOR ORDERS_SEQ;
	SET @ID=DBO.GENID('O',@I);

	INSERT INTO ORDERS
	VALUES(@ID, @A, @B, @C, @D);

	SELECT * FROM ORDERS;
END;

ADDORDER "10-AUG-2008", "C0001", "P0001", 3;

ADDORDER "20-SEP-2017",  "C0001", "P0002", 20;

ADDORDER "30-JUL-2010",  "C0001", "P0002", 25;

ADDORDER "15-JUN-2012",  "C0001", "P0004", 1;

ADDORDER "1-JAN-2012",  "C0003", "P0003", 10;


ADDORDER "20-JAN-2013",  "C0004", "P0004", 5;


ADDORDER "22-JUN-2013",  "C0003", "P0004", 4;

ADDORDER "12-JUL-2014",  "C0001", "P0004", 3;

ADDORDER "14-JUL-2011",  "C0002", "P0002", 3000;

ADDORDER "19-JAN-2022",  "C0002", "P0002", 7;

ADDORDER "19-JAN-2022",  "C0003", "P0001", 8;

ADDORDER "10-SEP-2012",  "C0001", "P0001", 1;

ADDORDER "10-AUG-2015",  "C0001", "P0001", 6;


UPDATE STOCK
SET ROL=13 WHERE PID='P0001';



SELECT * FROM ORDERS;
SELECT * FROM STOCK;




SELECT * FROM PRODUCT;
SELECT * FROM STOCK;

INSERT INTO STOCK
VALUES ('P0005',100,10,50);

INSERT INTO STOCK
VALUES ('P0004',30,10,7);

INSERT INTO STOCK
VALUES ('P0003',60,10,30);

INSERT INTO STOCK
VALUES ('P0001',40,20,15);

INSERT INTO STOCK
VALUES ('P0005',40,5,15);





--TRIGGERS
CREATE TRIGGER TR_INSERT_ORDERS
ON ORDERS
FOR INSERT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @QR AS INT;
	DECLARE @QS AS INT;
	
	SET @QR=(SELECT OQTY FROM INSERTED);
	SET @QS=(SELECT SQTY FROM STOCK WHERE PID=(SELECT PID FROM INSERTED));
	
	IF @QS >= @QR
		BEGIN
			UPDATE STOCK SET SQTY=SQTY-@QR
			WHERE PID=(SELECT PID FROM INSERTED);
			COMMIT;
			PRINT('ORDER ACCEPTED'); 
		END;
	ELSE
		BEGIN
			ROLLBACK;
			PRINT('INSUFFICIENT QUANTITY- REQUEST REJECTED');
		END;
END;


--DROP TRIGGER TR_INSERT_ORDERS;

--SELECT * FROM ORDERS;
--SELECT * FROM STOCK;




CREATE TRIGGER TR_UPDATE_ORDERS
ON ORDERS
FOR UPDATE
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @QR AS INT;
	DECLARE @QS AS INT;

	DECLARE @OQTY AS INT;
	DECLARE @NQTY AS INT;
	SET @OQTY= (SELECT OQTY FROM DELETED);
	SET @NQTY=(SELECT OQTY FROM INSERTED);
	SET @QR=@OQTY
	SET @QS=(SELECT SQTY FROM STOCK WHERE PID=(SELECT PID FROM INSERTED));

	IF @QS >= @QR
		BEGIN
			UPDATE STOCK
			SET SQTY=SQTY+@OQTY-@NQTY
			WHERE PID=(SELECT PID FROM INSERTED);
			COMMIT;
			PRINT('ORDER UPDATED'); 
		END;
	ELSE
		BEGIN
			ROLLBACK;
			PRINT('INSUFFICIENT QUANTITY- REQUEST REJECTED');
		END;
END;


UPDATE  ORDERS
SET OQTY=3 WHERE OID='O0009';


CREATE TRIGGER TR_DELETE_PRODUCT
ON PRODUCT
FOR DELETE
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM STOCK
	WHERE PID=(SELECT PID FROM DELETED);
END;








SELECT * FROM CUST;

SELECT * FROM ORDERS;
SELECT * FROM STOCK;

SELECT * FROM PRODUCT;
SELECT * FROM STOCK;

DELETE FROM PRODUCT
WHERE PID='P0005';



--------------------------------------------GENERATING REPORTS-----------------------------------------------------------------

--Generation of Bills for Customers
--Stored Procedure which accpets Bill Id/ Order Id as an argument

CREATE PROCEDURE BILLS @BID AS CHAR(5)
AS
BEGIN
	SET NOCOUNT ON;
	
	CREATE TABLE DUMMY
	(PID CHAR(5),
	OID CHAR(5), 
	ODATE DATE,
	CNAME VARCHAR(15),
	ADDRESS VARCHAR(30),
	PHONE CHAR(10),
	PDESC VARCHAR(15),
	PRICE DECIMAL(15,2),
	OQTY NUMERIC,
	AMOUNT DECIMAL(37,2)
	);

	INSERT INTO DUMMY
	SELECT PRODUCT.PID, OID, ODATE 'Order Date', CNAME, ADDRESS, PHONE, PDESC 'Product Description', PRICE, OQTY 'Quantity', PRICE*OQTY AS 'AMOUNT'
	FROM PRODUCT 
	INNER JOIN ORDERS 
	ON PRODUCT.PID=ORDERS.PID
	JOIN CUST
	ON CUST.CID=ORDERS.CID;

	SELECT OID, ODATE 'Order Date', CNAME, ADDRESS, PHONE, PDESC 'Product Description', PRICE, OQTY 'Quantity', PRICE*OQTY AS 'AMOUNT' 
	FROM DUMMY WHERE OID=@BID;
	
	DROP TABLE DUMMY;
END;

--DROP PROCEDURE BILLS;

BILLS 'O0001';
BILLS 'O0007';


SELECT * FROM ORDERS;
SELECT * FROM PRODUCT;
SELECT * FROM CUST;





--Show Product "Product_Id"
--gets the details of the product 

CREATE PROCEDURE SHOWPRODUCT @A AS CHAR(5)
AS
BEGIN

SELECT * FROM PRODUCT Prod
INNER JOIN SUPPLIER Supp
ON Prod.SID=Supp.SID WHERE PID=@A;

END;

SHOWPRODUCT 'P0004';
SHOWPRODUCT 'P0003';

SELECT * FROM PRODUCT;
SELECT * FROM SUPPLIER;


--Generating Reports for Owner:-





--Customer report or customer ledger accepts customer ID as parameter, and shud display all txns done by that customer since inception. This creates  a bill for Customer report.

SELECT * FROM CUST;
SELECT * FROM ORDERS;
SELECT * FROM PRODUCT;

CREATE PROCEDURE SHOW_CUSTOMER_LEDGER @CID CHAR(5)
AS
BEGIN
	CREATE TABLE DUMMY
	(OID CHAR(5),
	ODATE DATE,
	CID CHAR(5),
	PID CHAR(5), 
	OQTY NUMERIC CHECK(OQTY>=1),
	AMOUNT DECIMAL(15,2),
	CATEGORY VARCHAR(15));

	INSERT INTO DUMMY
	SELECT OID 'Order ID', ODATE 'Order Date', CID 'Customer ID', PRODUCT.PID 'Product ID', OQTY 'Number of Ordered items', OQTY*PRICE AS 'Amount', CATEGORY
	FROM ORDERS INNER JOIN PRODUCT ON PRODUCT.PID=ORDERS.PID;	
	
	SELECT* FROM DUMMY WHERE CID=@CID;
	DROP TABLE DUMMY;	
END;

SHOW_CUSTOMER_LEDGER 'C0001';


--SELECT * FROM PRODUCT;
--SELECT * FROM ORDERS;

--DROP PROCEDURE SHOW_CUSTOMER_LEDGER;







--Daily Report to display all the products that have been sold in a day. Summary report of all these products displayed.

CREATE PROCEDURE DAILYREPORT
AS
BEGIN
	SET NOCOUNT ON;

	CREATE TABLE DUMMY
	(OID CHAR(5),
	ODATE DATE,
	CID CHAR(5),
	PID CHAR(5), 
	OQTY NUMERIC CHECK(OQTY>=1),
	AMOUNT DECIMAL(15,2),
	CATEGORY VARCHAR(15));

	INSERT INTO DUMMY
	SELECT OID 'Order ID', ODATE 'Order Date', CID 'Customer ID', PRODUCT.PID 'Product ID', OQTY 'Number of Ordered items', OQTY*PRICE AS 'Amount', CATEGORY
	FROM ORDERS INNER JOIN PRODUCT ON PRODUCT.PID=ORDERS.PID;	
	
	DECLARE @D AS DATE;
	SET @D=GETDATE();

	SELECT OID 'Order ID', ODATE 'Order Date', CID 'Customer ID', PID 'Product ID', OQTY 'Number of Ordered items', AMOUNT, CATEGORY FROM DUMMY WHERE ODATE =@D;
	DROP TABLE DUMMY;	
END;

DAILYREPORT;

--SELECT * FROM DUMMY;
--DROP PROCEDURE DAILYREPORT;






--Supply report gives details of all the products supplied by a particular supplier.

SELECT * FROM SUPPLIER;
SELECT * FROM PRODUCT;

CREATE PROCEDURE SUPPLIER_REPORT @A AS CHAR(5)
AS
BEGIN
	SET NOCOUNT ON;

	CREATE TABLE DUMMY
	(SID CHAR(5),
	SNAME VARCHAR(30),
	SADD VARCHAR(30),
	SCITY VARCHAR(15),
	SPHONE CHAR(10),
	EMAIL VARCHAR(30),
	PID CHAR(5),
	PDESC VARCHAR(15),
	PRICE DECIMAL(5,2),
	CATEGORY VARCHAR(15));

	INSERT INTO DUMMY
	SELECT SUPPLIER.SID, SNAME, SADD, SCITY, SPHONE, EMAIL, PID, PDESC, PRICE, CATEGORY 
	FROM SUPPLIER INNER JOIN PRODUCT ON PRODUCT.SID=SUPPLIER.SID;
	
	SELECT SID 'Supplier ID', SNAME 'Supplier Name', SADD 'Address', SCITY 'City', SPHONE 'Contact No.', EMAIL, PID 'Product ID', PDESC 'Product Description', PRICE 'Price', CATEGORY 
	FROM DUMMY WHERE SID=@A;

	DROP TABLE DUMMY;	
END;

SUPPLIER_REPORT 'S0003';

--SELECT * FROM SUPPLIER;
--SELECT * FROM PRODUCT;





-- Generating Report on all transactions done within a particular Period. This Procedure accepts two dates from the user, and give all the transactions done between these two dates.

CREATE PROCEDURE TRANSACTIONS_REPORT @A AS DATE, @B AS DATE
AS
BEGIN
	SET NOCOUNT ON;

	CREATE TABLE DUMMY
	(OID CHAR(5),
	ODATE DATE,
	CID CHAR(5),
	PID CHAR(5), 
	OQTY NUMERIC CHECK(OQTY>=1),
	AMOUNT DECIMAL(15,2),
	CATEGORY VARCHAR(15));

	INSERT INTO DUMMY
	SELECT OID 'Order ID', ODATE 'Order Date', CID 'Customer ID', PRODUCT.PID 'Product ID', OQTY 'Number of Ordered items', OQTY*PRICE AS 'Amount', CATEGORY
	FROM ORDERS INNER JOIN PRODUCT ON PRODUCT.PID=ORDERS.PID;	
	
	--DECLARE @D AS DATE;
	--SET @D=GETDATE();

	SELECT OID 'Order ID', ODATE 'Order Date', CID 'Customer ID', PID 'Product ID', OQTY 'Number of Ordered items', AMOUNT, CATEGORY FROM DUMMY WHERE ODATE BETWEEN @A AND @B;
	DROP TABLE DUMMY;	
END;
 

 TRANSACTIONS_REPORT '01-JAN-2010', '02-JUN-2013';

 --SELECT * FROM ORDERS;
 --SELECT * FROM PRODUCT;





--Product Report to get the report of the products sold, so that the response of the product can be gauged. It also lists the frequency of transactions for each product. Accepts product id from user as input.

CREATE PROCEDURE PRODUCT_REPORT @A AS CHAR(5)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT PID 'Product ID', SUM(OQTY) 'Frequency of Ordered items'
	FROM ORDERS 
	GROUP BY PID
	HAVING PID=@A
	ORDER BY SUM(OQTY) DESC;
END;

PRODUCT_REPORT 'P0004';

--DROP PROCEDURE PRODUCT_REPORT;
--SELECT * FROM PRODUCT;
--SELECT * FROM ORDERS;


